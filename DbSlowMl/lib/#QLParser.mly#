%{
    (* it's private, but at least works for now *)
    open AQL__QLToken
    open AQL__AIL
    module IL = AQL__AIL
%}
%token SELECT
%token FROM
%token WHERE
%token AS
%token COMMA
%token EQUAL  "="  (* = *)
%token NEQUAL "<>" (* <> | != *)
%token AND
%token OR
%token IN
%token LPAREN "("
%token RPAREN ")"
%token <string> IDENT
%token <int> INTEGER
%token PLUS      "+"
%token MINUS     "-"
%token MULTIPLY  "*"
%token DIVIDE    "/"
%token EOF
%start <string option> sql_stmt
%%

/* sql_stmt: */
/*   | SELECT; prj = projections; FROM; tbl_name; f = opt_filter { Some SELECT } */

sql_stmt:
  | SELECT; prj = projections; FROM; t = table; { Some ("SELECT " ^ prj ^ " FROM " ^ t) }

projections:
  | ps = projections; COMMA; p = projection { ps ^ ", " ^ p }
  | p = projection { p }

projection:
  | c = column { column { name = c; type_tag = UnknownType; value = Empty } }
  | expr

column:
  | i = IDENT { i }
/*
 * this is special, interpretation of * depends on context,
 * and when it appears alone, treat it as column name
 */
  | "*" { "*" }

expr:
  | l = lit { IL.Lit l }
  | c = column_expr { IL.Col c }
  | e1 = expr; op = bin_op; e2 = expr {
                                     IL.Arith (IL.UnknownType, op, [e1; e2])
                                   }

column_expr:
  | c = column { IL.column { } }

lit:
  | number
  | 

bin_op:
  | "+" { IL.Plus }
  | "-" { IL.Minus }
  | "*" { IL.Mul }
  | "/" { IL.Div }

table:
  | i = IDENT { " TBL IDENT " ^ i ^ " " }

/* opt_filter */

%%
